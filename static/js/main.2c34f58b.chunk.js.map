{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","onsubmitpredict","fetch","method","headers","body","JSON","stringify","age","state","age_value","sex","sex_value","cp","cp_value","trestbps","trestbps_value","chol","chol_value","fbs","fbs_value","restecg","restecg_value","thalach","thalach_value","exang","exang_value","oldpeak","oldpeak_value","slope","slope_value","ca","ca_value","thal","thal_value","then","response","json","data","console","log","setState","output","Response","className","placeholder","onChange","Event","target","value","htmlFor","type","name","min","max","step","this","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c34f58b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super();\n    this.state= {\n      age_value: '',\n      sex_value: '',\n      cp_value: '',\n      trestbps_value : '',\n      chol_value: '',\n      fbs_value: '',\n      restecg_value: '',\n      thalach_value: '',\n      exang_value: '',\n      oldpeak_value: '',\n      slope_value: '',\n      ca_value: '',\n      thal_value: '',\n      output: ''\n    }\n    \n  }\n\n  onsubmitpredict = () => {\n    fetch('https://flask-server-fs.herokuapp.com/predict',{\n        method: 'POST',\n        headers: {'content-type': 'application/json'},\n        body: JSON.stringify({\n            age: this.state.age_value,\n            sex: this.state.sex_value,\n            cp: this.state.cp_value,\n            trestbps: this.state.trestbps_value,            \n            chol: this.state.chol_value,\n            fbs: this.state.fbs_value,\n            restecg: this.state.restecg_value,\n            thalach: this.state.thalach_value,\n            exang: this.state.exang_value,\n            oldpeak: this.state.oldpeak_value,\n            slope: this.state.slope_value,\n            ca: this.state.ca_value,\n            thal: this.state.thal_value\n        })\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data)\n      this.setState({output: data})        \n    })\n  }\n\n  componentDidMount() {\n    fetch('https://flask-server-fs.herokuapp.com/')\n        .then(Response => Response.json())\n        .then(console.log)\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>HEART DISEASE DETECTOR</h1>\n        <fieldset>\n          <legend><b>Age</b></legend>\n          <input placeholder=\"ENTER YOUR AGE\" onChange={(Event)=>{this.setState({age_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>Sex</b></legend>\n          <label htmlFor=\"male\" >Male</label>\n          <input  type=\"radio\" name=\"gender\" value={1} onChange={(Event)=>{this.setState({sex_value:Event.target.value})}}></input>\n          <label htmlFor=\"female\">Female</label>\n          <input  type=\"radio\" name=\"gender\" value={0} onChange={(Event)=>{this.setState({sex_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>Chest Pain Type</b></legend>\n          <label>              \n            <span />0: Typical angina: chest pain related decrease blood supply to the heart<br />\n            <span />1: Atypical angina: chest pain not related to heart<br />\n            <span />2: Non-anginal pain: typically esophageal spasms (non heart related)<br />\n            <span />3: Asymptomatic: chest pain not showing signs of disease <br />\n          </label>\n          <input placeholder=\"ENTER A NUMBER\" type=\"number\" min=\"0\" max=\"3\" step=\"1\" onChange={(Event)=>{this.setState({cp_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>trestbps</b></legend>\n          <input value={this.state.trestbps_value} onChange={(Event)=>{this.setState({trestbps_value:Event.target.value})}}></input>\n          <input type=\"range\" min=\"94\" max=\"200\" step=\"1\" onChange={(Event)=>{this.setState({trestbps_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>cholestrol</b></legend>\n          <input value={this.state.chol_value} onChange={(Event)=>{this.setState({chol_value:Event.target.value})}}></input>\n          <input type=\"range\" min=\"126\" max=\"564\" step=\"1\" onChange={(Event)=>{this.setState({chol_value:Event.target.value})}}></input><br />\n        </fieldset>            \n        <fieldset>\n          <legend><b>fasting blood sugar</b></legend>            \n          <span /><label htmlFor=\"fbs_no\" >No</label>\n          <input  type=\"radio\" name=\"fbs\" value={0} onChange={(Event)=>{this.setState({fbs_value:Event.target.value})}}></input>\n          <label htmlFor=\"fbs_yes\">Yes</label>\n          <input  type=\"radio\" name=\"fbs\" value={1} onChange={(Event)=>{this.setState({fbs_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>restecg</b></legend>            \n          <input  type=\"number\" min=\"0\" max=\"2\" step=\"1\" onChange={(Event)=>{this.setState({restecg_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>thalach</b></legend>            \n          <input value={this.state.thalach_value} onChange={(Event)=>{this.setState({thalach_value:Event.target.value})}}></input>\n          <input type=\"range\" min=\"71\" max=\"202\" step=\"1\" onChange={(Event)=>{this.setState({thalach_value:Event.target.value})}}></input><br />\n        </fieldset>      \n        <fieldset>\n          <legend><b>exang</b></legend>          \n          <span /><label htmlFor=\"exang_no\" >No</label>\n          <input  type=\"radio\" name=\"exang\" value={0} onChange={(Event)=>{this.setState({exang_value:Event.target.value})}}></input>\n          <label htmlFor=\"exang_yes\">Yes</label>\n          <input  type=\"radio\" name=\"exang\" value={1} onChange={(Event)=>{this.setState({exang_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>Oldpeak</b></legend>            \n          <input value={this.state.oldpeak_value} onChange={(Event)=>{this.setState({oldpeak_value:Event.target.value})}}></input>\n          <input type=\"range\" min=\"0\" max=\"6.2\" step=\"0.2\" onChange={(Event)=>{this.setState({oldpeak_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>slope</b></legend>            \n          <input  type=\"number\" min=\"0\" max=\"2\" step=\"1\" onChange={(Event)=>{this.setState({slope_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>ca</b></legend>            \n          <input  type=\"number\" min=\"0\" max=\"4\" step=\"1\" onChange={(Event)=>{this.setState({ca_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <fieldset>\n          <legend><b>thal</b></legend>            \n          <input  type=\"number\" min=\"0\" max=\"3\" step=\"1\" onChange={(Event)=>{this.setState({thal_value:Event.target.value})}}></input><br />\n        </fieldset>\n        <div className= \"button\">  \n          <button onClick={this.onsubmitpredict}>Predict</button>          \n        </div>\n        <div id=\"output\">\n          <span >{this.state.output}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}